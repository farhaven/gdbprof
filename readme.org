* GDB Profile
This is a Python script for GDB that can be used to gather stack traces in a format suitable for Brendan Gregg's
[FlameGraph](https://github.com/brendangregg/FlameGraph).

** How to use
Build the program you want to use with enough debug information to gather sensible stack snapshots. For example,
for Rust, you can set the environment variable ~RUSTFLAGS~ to something like ~-C debuginfo=2~. Then, start it
with GDB and this script loaded:

#+BEGIN_SRC sh
gdb -ex 'source /path/to/gdbprofile.py' -ex run /path/to/my-binary
#+END_SRC

The program will then start running as usual. In a separate terminal, send the signal ~SIGEMT~ to the process
each time you want to grab a snapshot of the stack:

#+BEGIN_SRC sh
while sleep 0.1; do
  kill -EMT $(pgrep my-binary)
done
#+END_SRC

This will tacke stack samples at roughly 10 Hz. Each time a snapshot is gathered, profiling data is written to
~trace.txt~ in GDB's working directory. You can then use FlameGraph to create a visualization of the profiling
data:

#+BEGIN_SRC sh
cat trace.txt | ./flamegraph.pl > /tmp/trace.svg
firefox file:///tmp/trace.svg
#+END_SRC

* Questions and Answers
** What systems does this work on?
I've tested it with Rust binaries built on OpenBSD. You may have to use a signal other than ~SIGEMT~ to trigger
stack trace collection if your system does not offer that. Check the ~signal(3)~ man page on your machine to
see which signals are supported.

** Why don't you just use perf, gprof, callgrind, $TOOL?
While ~gprof~ is available on OpenBSD, it requires compiler support, which ~rustc~ doesn't have. ~perf~,
~callgrind~ and friends are not available on OpenBSD to my knowledge.

** Isn't this just the poor man's profiler?
It sort of is, yes. The difference is that the poor man's profiler attaches to a running process, which is
problematic from a security viewpoint and that I couldn't get a GDB attached to an already running Rust
process to create reliable back traces with all requiered symbol information.
